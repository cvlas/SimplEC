multivalued: internal_temperature(Id, VehicleType)=[normal, very_warm, very_cold].

initially punctuality(_,_)=punctual.

initiate punctuality(Id, VehicleType)=punctual if
	stop_enter(Id, VehicleType, _, scheduled)
or	stop_enter(Id, VehicleType, _, early).

terminate punctuality(Id, VehicleType)=punctual if
	stop_enter(Id, VehicleType, _, late)
or	stop_leave(Id, VehicleType, _, early).

punctuality(Id, VehicleType)=non_punctual iff
	not punctuality(Id, VehicleType)=punctual.

happens punctuality_change(Id, VehicleType, punctual) if
	end punctuality(Id, VehicleType)=non_punctual.

happens punctuality_change(Id, VehicleType, non_punctual) if
	end punctuality(Id, VehicleType)=punctual.

driving_style(Id, VehicleType)=unsafe iff
	sharp_turn(Id, VehicleType)=very_sharp or
	abrupt_acceleration(Id, VehicleType)=very_abrupt or
	abrupt_deceleration(Id, VehicleType)=very_abrupt.

driving_style(Id, VehicleType)=uncomfortable iff
	(sharp_turn(Id, VehicleType)=sharp,
	not(abrupt_acceleration(Id, VehicleType)=very_abrupt or abrupt_deceleration(Id, VehicleType)=very_abrupt)) or
	abrupt_acceleration(Id, VehicleType)=abrupt or
	abrupt_deceleration(Id, VehicleType)=abrupt.

driving_quality(Id, VehicleType)=high iff
	punctuality(Id, VehicleType)=punctual,
	not(driving_style(Id, VehicleType)=unsafe or driving_style(Id, VehicleType)=uncomfortable).

driving_quality(Id, VehicleType)=medium iff
	punctuality(Id, VehicleType)=punctual,
	driving_style(Id, VehicleType)=uncomfortable.

driving_quality(Id, VehicleType)=low iff
	punctuality(Id, VehicleType)=non_punctual or
	driving_style(Id, VehicleType)=unsafe.

passenger_comfort(Id, VehicleType)=reducing iff
	driving_style(Id, VehicleType)=uncomfortable or
	driving_style(Id, VehicleType)=unsafe or
	passenger_density(Id, VehicleType)=high or
	noise_level(Id, VehicleType)=high or
	internal_temperature(Id, VehicleType)=very_warm or
	internal_temperature(Id, VehicleType)=very_cold.

initially passenger_density(_,_)=low.

initiate passenger_density(Id, VehicleType)=Value if
	passenger_density_change(Id, VehicleType, Value).

initially noise_level(_,_)=low.

initiate noise_level(Id, VehicleType)=Value if
	noise_level_change(Id, VehicleType, Value).

initially internal_temperature(_,_)=normal.

initiate internal_temperature(Id, VehicleType)=Value if
	internal_temperature_change(Id, VehicleType, Value).

driver_comfort(Id, VehicleType)=reducing iff
	driving_style(Id, VehicleType)=uncomfortable or
	driving_style(Id, VehicleType)=unsafe or
	noise_level(Id, VehicleType)=high or
	internal_temperature(Id, VehicleType)=very_warm or
	internal_temperature(Id, VehicleType)=very_cold.

passenger_satisfaction(Id, VehicleType)=reducing iff
	punctuality(Id, VehicleType)=non_punctual or
	passenger_comfort(Id, VehicleType)=reducing.

collectIntervals: abrupt_acceleration(_,_)=abrupt,
					abrupt_acceleration(_,_)=very_abrupt,
					abrupt_deceleration(_,_)=abrupt,
					abrupt_deceleration(_,_)=very_abrupt,
					sharp_turn(_,_)=sharp,
					sharp_turn(_,_)=very_sharp.

grounding: abrupt_acceleration(Id,VehicleType)=abrupt	-->	vehicle(Id, VehicleType). 
grounding: abrupt_acceleration(Id,VehicleType)=very_abrupt	-->	vehicle(Id, VehicleType). 
grounding: abrupt_deceleration(Id,VehicleType)=abrupt	-->	vehicle(Id, VehicleType). 
grounding: abrupt_deceleration(Id,VehicleType)=very_abrupt	-->	vehicle(Id, VehicleType). 
grounding: sharp_turn(Id,VehicleType)=sharp	-->	vehicle(Id, VehicleType). 
grounding: sharp_turn(Id,VehicleType)=very_sharp	-->	vehicle(Id, VehicleType).
grounding: punctuality(Id,VehicleType)=punctual	-->	vehicle(Id, VehicleType).   
grounding: punctuality(Id,VehicleType)=non_punctual	-->	vehicle(Id, VehicleType).
grounding: punctuality_change(Id,VehicleType,punctual)	-->	vehicle(Id, VehicleType).
grounding: punctuality_change(Id,VehicleType,non_punctual)	-->	vehicle(Id, VehicleType).
grounding: passenger_density(Id,VehicleType)=high	-->	vehicle(Id, VehicleType).
grounding: noise_level(Id,VehicleType)=high	-->	vehicle(Id, VehicleType).
grounding: internal_temperature(Id,VehicleType)=very_warm	-->	vehicle(Id, VehicleType).
grounding: internal_temperature(Id,VehicleType)=very_cold	-->	vehicle(Id, VehicleType).
grounding: driving_style(Id,VehicleType)=unsafe	-->	vehicle(Id, VehicleType).
grounding: driving_style(Id,VehicleType)=uncomfortable	-->	vehicle(Id, VehicleType).
grounding: driving_quality(Id,VehicleType)=high	-->	vehicle(Id, VehicleType).
grounding: driving_quality(Id,VehicleType)=medium	-->	vehicle(Id, VehicleType).
grounding: driving_quality(Id,VehicleType)=low	-->	vehicle(Id, VehicleType). 
grounding: passenger_comfort(Id,VehicleType)=reducing	-->	vehicle(Id, VehicleType).
grounding: driver_comfort(Id,VehicleType)=reducing	-->	vehicle(Id, VehicleType).
grounding: passenger_satisfaction(Id,VehicleType)=reducing	-->	vehicle(Id, VehicleType).
