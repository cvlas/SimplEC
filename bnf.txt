space 		::= 	spaceChar, space
		|	"".

goal		::= 	space, rule, space, goal
		|	"".

rule		::=	initially
		|	holdsFor
		|	initiatedAt
		|	terminatedAt
		|	happensAt.

initially	::=	"initially", space, fluent, ".".

holdsFor	::= 	fluent, space, "iff", space, forBody, ".".

initiatedAt	::=	"initiate", space, fluent, space, "if", space, atBody, "."

terminatedAt	::=	"terminate", space, fluent, space, "if", space, atBody, "."

happensAt	::=	"happens", space, event, space, "if", space, atBody, ".".

fluent		::= 	functor, "(", argumentsList, ")", value.

event		::=	functor, "(", argumentsList, ")".

functor 	::= 	lower, restChars.

variable	::=	upper, restChars
		|	"_", restChars.

value		::=	"=", argument
		|	"".

argumentsList	::= 	argument, moreArguments.

argument 	::= 	functor
		|	variable
		|	number.

moreArguments	::=	",", space, argument, moreArguments
		|	"".

forBody		::=	expression.

expression	::=	component, moreComponents.

component	::=	fluent
		|	"(", space, expression, space, ")"
		|	"not", space, expression.

moreComponents	::=	",", space, expression
		|	space, "or", space, expression
		|	"".

atBody		::=	"happens", space, event, moreConditions
		|	"not happens", space, event, moreConditions
		|	"start", space, fluent, moreConditions
		|	"end", space, fluent, moreConditions.

condition	::=	"start", space, fluent
		|	"end", space, fluent
		|	"happens", space, event
		|	"not happens", space, event
		|	fluent
		|	"not", space, fluent.

moreConditions	::=	",", space, condition, moreConditions
		|	"".

spaceChar	::=	"\t" | "\n" | "\r" | " ".

lower		::=	[a-z].

upper		::=	[A-Z].

number		::= 	[0-9], number
		|	"".

restChars	::= 	[a-zA-Z0-9_], restChars
		|	"".


