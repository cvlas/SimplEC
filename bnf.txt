goal		::= 	rule*

rule		::=	initially
		|	holdsFor
		|	initiatedAt
		|	terminatedAt
		|	happensAt

initially	::=	"initially", fluent

holdsFor	::= 	"holds", fluent, "iff", forBody

initiatedAt	::=	"initiate", fluent, "if", atBody

terminatedAt	::=	"terminate", fluent, "if", atBody

happensAt	::=	"happens", event, "if", atBody

fluent		::= 	functor, "(", argumentsList, ")", (value)?

event		::=	functor, "(", argumentsList, ")"

forBody		::=	expression

expression	::=	component, ([","|"or"], component)*

component	::=	fluent
		|	"(", expression, ")"
		|	"not", expression

atBody		::=	"start", fluent, (",", condition)*
		|	"end", fluent, (",", condition)*
		|	"happens", event, (",", condition)*
		|	"not happens", event, (",", condition)*

condition	::=	"start", fluent
		|	"end", fluent
		|	"happens", event
		|	"not happens", event
		|	"holds" fluent
		|	"not holds", fluent

functor 	::= 	[a-z], [a-zA-Z0-9_]*

variable	::=	[A-Z_], [a-zA-Z0-9_]*

number		::= 	[0-9]+

argument 	::= 	[a-zA-Z0-9_]+

value		::=	"=", argument

argumentsList	::= 	argument, (",", argument)*
